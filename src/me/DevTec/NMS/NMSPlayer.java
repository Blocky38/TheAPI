package me.DevTec.NMS;

import java.lang.reflect.Method;

import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.inventory.PlayerInventory;

import me.DevTec.TheAPI;
import me.DevTec.NMS.NMSAPI.TitleAction;

public class NMSPlayer {

	public static enum Sound {
		AMBIENT_CAVE, AMBIENT_UNDERWATER_ENTER, AMBIENT_UNDERWATER_EXIT, AMBIENT_UNDERWATER_LOOP,
		AMBIENT_UNDERWATER_LOOP_ADDITIONS, AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE,
		AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE, BLOCK_ANVIL_BREAK, BLOCK_ANVIL_DESTROY, BLOCK_ANVIL_FALL,
		BLOCK_ANVIL_HIT, BLOCK_ANVIL_LAND, BLOCK_ANVIL_PLACE, BLOCK_ANVIL_STEP, BLOCK_ANVIL_USE, ITEM_ARMOR_EQUIP_CHAIN,
		ITEM_ARMOR_EQUIP_DIAMOND, ITEM_ARMOR_EQUIP_ELYTRA, ITEM_ARMOR_EQUIP_GENERIC, ITEM_ARMOR_EQUIP_GOLD,
		ITEM_ARMOR_EQUIP_IRON, ITEM_ARMOR_EQUIP_LEATHER, ITEM_ARMOR_EQUIP_TURTLE, ENTITY_ARMOR_STAND_BREAK,
		ENTITY_ARMOR_STAND_FALL, ENTITY_ARMOR_STAND_HIT, ENTITY_ARMOR_STAND_PLACE, ENTITY_ARROW_HIT,
		ENTITY_ARROW_HIT_PLAYER, ENTITY_ARROW_SHOOT, ITEM_AXE_STRIP, BLOCK_BAMBOO_BREAK, BLOCK_BAMBOO_FALL,
		BLOCK_BAMBOO_HIT, BLOCK_BAMBOO_PLACE, BLOCK_BAMBOO_STEP, BLOCK_BAMBOO_SAPLING_BREAK, BLOCK_BAMBOO_SAPLING_HIT,
		BLOCK_BAMBOO_SAPLING_PLACE, BLOCK_BARREL_CLOSE, BLOCK_BARREL_OPEN, ENTITY_BAT_AMBIENT, ENTITY_BAT_DEATH,
		ENTITY_BAT_HURT, ENTITY_BAT_LOOP, ENTITY_BAT_TAKEOFF, BLOCK_BEACON_ACTIVATE, BLOCK_BEACON_AMBIENT,
		BLOCK_BEACON_DEACTIVATE, BLOCK_BEACON_POWER_SELECT, ENTITY_BEE_DEATH, ENTITY_BEE_HURT,
		ENTITY_BEE_LOOP_AGGRESSIVE, ENTITY_BEE_LOOP, ENTITY_BEE_STING, ENTITY_BEE_POLLINATE, BLOCK_BEEHIVE_DRIP,
		BLOCK_BEEHIVE_ENTER, BLOCK_BEEHIVE_EXIT, BLOCK_BEEHIVE_SHEAR, BLOCK_BEEHIVE_WORK, BLOCK_BELL_USE,
		BLOCK_BELL_RESONATE, ENTITY_BLAZE_AMBIENT, ENTITY_BLAZE_BURN, ENTITY_BLAZE_DEATH, ENTITY_BLAZE_HURT,
		ENTITY_BLAZE_SHOOT, ENTITY_BOAT_PADDLE_LAND, ENTITY_BOAT_PADDLE_WATER, ITEM_BOOK_PAGE_TURN, ITEM_BOOK_PUT,
		ENTITY_FISHING_BOBBER_RETRIEVE, ENTITY_FISHING_BOBBER_SPLASH, ENTITY_FISHING_BOBBER_THROW,
		BLOCK_BLASTFURNACE_FIRE_CRACKLE, ITEM_BOTTLE_EMPTY, ITEM_BOTTLE_FILL, ITEM_BOTTLE_FILL_DRAGONBREATH,
		BLOCK_BREWING_STAND_BREW, BLOCK_BUBBLE_COLUMN_BUBBLE_POP, BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT,
		BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE, BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT, BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE,
		ITEM_BUCKET_EMPTY, ITEM_BUCKET_EMPTY_FISH, ITEM_BUCKET_EMPTY_LAVA, ITEM_BUCKET_FILL, ITEM_BUCKET_FILL_FISH,
		ITEM_BUCKET_FILL_LAVA, BLOCK_CAMPFIRE_CRACKLE, ENTITY_CAT_AMBIENT, ENTITY_CAT_STRAY_AMBIENT, ENTITY_CAT_DEATH,
		ENTITY_CAT_EAT, ENTITY_CAT_HISS, ENTITY_CAT_BEG_FOR_FOOD, ENTITY_CAT_HURT, ENTITY_CAT_PURR, ENTITY_CAT_PURREOW,
		BLOCK_CHEST_CLOSE, BLOCK_CHEST_LOCKED, BLOCK_CHEST_OPEN, ENTITY_CHICKEN_AMBIENT, ENTITY_CHICKEN_DEATH,
		ENTITY_CHICKEN_EGG, ENTITY_CHICKEN_HURT, ENTITY_CHICKEN_STEP, BLOCK_CHORUS_FLOWER_DEATH,
		BLOCK_CHORUS_FLOWER_GROW, ITEM_CHORUS_FRUIT_TELEPORT, BLOCK_WOOL_BREAK, BLOCK_WOOL_FALL, BLOCK_WOOL_HIT,
		BLOCK_WOOL_PLACE, BLOCK_WOOL_STEP, ENTITY_COD_AMBIENT, ENTITY_COD_DEATH, ENTITY_COD_FLOP, ENTITY_COD_HURT,
		BLOCK_COMPARATOR_CLICK, BLOCK_COMPOSTER_EMPTY, BLOCK_COMPOSTER_FILL, BLOCK_COMPOSTER_FILL_SUCCESS,
		BLOCK_COMPOSTER_READY, BLOCK_CONDUIT_ACTIVATE, BLOCK_CONDUIT_AMBIENT, BLOCK_CONDUIT_AMBIENT_SHORT,
		BLOCK_CONDUIT_ATTACK_TARGET, BLOCK_CONDUIT_DEACTIVATE, ENTITY_COW_AMBIENT, ENTITY_COW_DEATH, ENTITY_COW_HURT,
		ENTITY_COW_MILK, ENTITY_COW_STEP, ENTITY_CREEPER_DEATH, ENTITY_CREEPER_HURT, ENTITY_CREEPER_PRIMED,
		BLOCK_CROP_BREAK, ITEM_CROP_PLANT, ITEM_CROSSBOW_HIT, ITEM_CROSSBOW_LOADING_END, ITEM_CROSSBOW_LOADING_MIDDLE,
		ITEM_CROSSBOW_LOADING_START, ITEM_CROSSBOW_QUICK_CHARGE_1, ITEM_CROSSBOW_QUICK_CHARGE_2,
		ITEM_CROSSBOW_QUICK_CHARGE_3, ITEM_CROSSBOW_SHOOT, BLOCK_DISPENSER_DISPENSE, BLOCK_DISPENSER_FAIL,
		BLOCK_DISPENSER_LAUNCH, ENTITY_DOLPHIN_AMBIENT, ENTITY_DOLPHIN_AMBIENT_WATER, ENTITY_DOLPHIN_ATTACK,
		ENTITY_DOLPHIN_DEATH, ENTITY_DOLPHIN_EAT, ENTITY_DOLPHIN_HURT, ENTITY_DOLPHIN_JUMP, ENTITY_DOLPHIN_PLAY,
		ENTITY_DOLPHIN_SPLASH, ENTITY_DOLPHIN_SWIM, ENTITY_DONKEY_AMBIENT, ENTITY_DONKEY_ANGRY, ENTITY_DONKEY_CHEST,
		ENTITY_DONKEY_DEATH, ENTITY_DONKEY_HURT, ENTITY_DROWNED_AMBIENT, ENTITY_DROWNED_AMBIENT_WATER,
		ENTITY_DROWNED_DEATH, ENTITY_DROWNED_DEATH_WATER, ENTITY_DROWNED_HURT, ENTITY_DROWNED_HURT_WATER,
		ENTITY_DROWNED_SHOOT, ENTITY_DROWNED_STEP, ENTITY_DROWNED_SWIM, ENTITY_EGG_THROW, ENTITY_ELDER_GUARDIAN_AMBIENT,
		ENTITY_ELDER_GUARDIAN_AMBIENT_LAND, ENTITY_ELDER_GUARDIAN_CURSE, ENTITY_ELDER_GUARDIAN_DEATH,
		ENTITY_ELDER_GUARDIAN_DEATH_LAND, ENTITY_ELDER_GUARDIAN_FLOP, ENTITY_ELDER_GUARDIAN_HURT,
		ENTITY_ELDER_GUARDIAN_HURT_LAND, ITEM_ELYTRA_FLYING, BLOCK_ENCHANTMENT_TABLE_USE, BLOCK_ENDER_CHEST_CLOSE,
		BLOCK_ENDER_CHEST_OPEN, ENTITY_ENDER_DRAGON_AMBIENT, ENTITY_ENDER_DRAGON_DEATH, ENTITY_DRAGON_FIREBALL_EXPLODE,
		ENTITY_ENDER_DRAGON_FLAP, ENTITY_ENDER_DRAGON_GROWL, ENTITY_ENDER_DRAGON_HURT, ENTITY_ENDER_DRAGON_SHOOT,
		ENTITY_ENDER_EYE_DEATH, ENTITY_ENDER_EYE_LAUNCH, ENTITY_ENDERMAN_AMBIENT, ENTITY_ENDERMAN_DEATH,
		ENTITY_ENDERMAN_HURT, ENTITY_ENDERMAN_SCREAM, ENTITY_ENDERMAN_STARE, ENTITY_ENDERMAN_TELEPORT,
		ENTITY_ENDERMITE_AMBIENT, ENTITY_ENDERMITE_DEATH, ENTITY_ENDERMITE_HURT, ENTITY_ENDERMITE_STEP,
		ENTITY_ENDER_PEARL_THROW, BLOCK_END_GATEWAY_SPAWN, BLOCK_END_PORTAL_FRAME_FILL, BLOCK_END_PORTAL_SPAWN,
		ENTITY_EVOKER_AMBIENT, ENTITY_EVOKER_CAST_SPELL, ENTITY_EVOKER_CELEBRATE, ENTITY_EVOKER_DEATH,
		ENTITY_EVOKER_FANGS_ATTACK, ENTITY_EVOKER_HURT, ENTITY_EVOKER_PREPARE_ATTACK, ENTITY_EVOKER_PREPARE_SUMMON,
		ENTITY_EVOKER_PREPARE_WOLOLO, ENTITY_EXPERIENCE_BOTTLE_THROW, ENTITY_EXPERIENCE_ORB_PICKUP,
		BLOCK_FENCE_GATE_CLOSE, BLOCK_FENCE_GATE_OPEN, ITEM_FIRECHARGE_USE, ENTITY_FIREWORK_ROCKET_BLAST,
		ENTITY_FIREWORK_ROCKET_BLAST_FAR, ENTITY_FIREWORK_ROCKET_LARGE_BLAST, ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR,
		ENTITY_FIREWORK_ROCKET_LAUNCH, ENTITY_FIREWORK_ROCKET_SHOOT, ENTITY_FIREWORK_ROCKET_TWINKLE,
		ENTITY_FIREWORK_ROCKET_TWINKLE_FAR, BLOCK_FIRE_AMBIENT, BLOCK_FIRE_EXTINGUISH, ENTITY_FISH_SWIM,
		ITEM_FLINTANDSTEEL_USE, ENTITY_FOX_AGGRO, ENTITY_FOX_AMBIENT, ENTITY_FOX_BITE, ENTITY_FOX_DEATH, ENTITY_FOX_EAT,
		ENTITY_FOX_HURT, ENTITY_FOX_SCREECH, ENTITY_FOX_SLEEP, ENTITY_FOX_SNIFF, ENTITY_FOX_SPIT,
		BLOCK_FURNACE_FIRE_CRACKLE, ENTITY_GENERIC_BIG_FALL, ENTITY_GENERIC_BURN, ENTITY_GENERIC_DEATH,
		ENTITY_GENERIC_DRINK, ENTITY_GENERIC_EAT, ENTITY_GENERIC_EXPLODE, ENTITY_GENERIC_EXTINGUISH_FIRE,
		ENTITY_GENERIC_HURT, ENTITY_GENERIC_SMALL_FALL, ENTITY_GENERIC_SPLASH, ENTITY_GENERIC_SWIM,
		ENTITY_GHAST_AMBIENT, ENTITY_GHAST_DEATH, ENTITY_GHAST_HURT, ENTITY_GHAST_SCREAM, ENTITY_GHAST_SHOOT,
		ENTITY_GHAST_WARN, BLOCK_GLASS_BREAK, BLOCK_GLASS_FALL, BLOCK_GLASS_HIT, BLOCK_GLASS_PLACE, BLOCK_GLASS_STEP,
		BLOCK_GRASS_BREAK, BLOCK_GRASS_FALL, BLOCK_GRASS_HIT, BLOCK_GRASS_PLACE, BLOCK_GRASS_STEP,
		BLOCK_WET_GRASS_BREAK, BLOCK_WET_GRASS_FALL, BLOCK_WET_GRASS_HIT, BLOCK_WET_GRASS_PLACE, BLOCK_WET_GRASS_STEP,
		BLOCK_CORAL_BLOCK_BREAK, BLOCK_CORAL_BLOCK_FALL, BLOCK_CORAL_BLOCK_HIT, BLOCK_CORAL_BLOCK_PLACE,
		BLOCK_CORAL_BLOCK_STEP, BLOCK_GRAVEL_BREAK, BLOCK_GRAVEL_FALL, BLOCK_GRAVEL_HIT, BLOCK_GRAVEL_PLACE,
		BLOCK_GRAVEL_STEP, BLOCK_GRINDSTONE_USE, ENTITY_GUARDIAN_AMBIENT, ENTITY_GUARDIAN_AMBIENT_LAND,
		ENTITY_GUARDIAN_ATTACK, ENTITY_GUARDIAN_DEATH, ENTITY_GUARDIAN_DEATH_LAND, ENTITY_GUARDIAN_FLOP,
		ENTITY_GUARDIAN_HURT, ENTITY_GUARDIAN_HURT_LAND, ITEM_HOE_TILL, BLOCK_HONEY_BLOCK_BREAK, BLOCK_HONEY_BLOCK_FALL,
		BLOCK_HONEY_BLOCK_HIT, BLOCK_HONEY_BLOCK_PLACE, BLOCK_HONEY_BLOCK_SLIDE, BLOCK_HONEY_BLOCK_STEP,
		ITEM_HONEY_BOTTLE_DRINK, ENTITY_HORSE_AMBIENT, ENTITY_HORSE_ANGRY, ENTITY_HORSE_ARMOR, ENTITY_HORSE_BREATHE,
		ENTITY_HORSE_DEATH, ENTITY_HORSE_EAT, ENTITY_HORSE_GALLOP, ENTITY_HORSE_HURT, ENTITY_HORSE_JUMP,
		ENTITY_HORSE_LAND, ENTITY_HORSE_SADDLE, ENTITY_HORSE_STEP, ENTITY_HORSE_STEP_WOOD, ENTITY_HOSTILE_BIG_FALL,
		ENTITY_HOSTILE_DEATH, ENTITY_HOSTILE_HURT, ENTITY_HOSTILE_SMALL_FALL, ENTITY_HOSTILE_SPLASH,
		ENTITY_HOSTILE_SWIM, ENTITY_HUSK_AMBIENT, ENTITY_HUSK_CONVERTED_TO_ZOMBIE, ENTITY_HUSK_DEATH, ENTITY_HUSK_HURT,
		ENTITY_HUSK_STEP, ENTITY_RAVAGER_AMBIENT, ENTITY_RAVAGER_ATTACK, ENTITY_RAVAGER_CELEBRATE, ENTITY_RAVAGER_DEATH,
		ENTITY_RAVAGER_HURT, ENTITY_RAVAGER_STEP, ENTITY_RAVAGER_STUNNED, ENTITY_RAVAGER_ROAR,
		ENTITY_ILLUSIONER_AMBIENT, ENTITY_ILLUSIONER_CAST_SPELL, ENTITY_ILLUSIONER_DEATH, ENTITY_ILLUSIONER_HURT,
		ENTITY_ILLUSIONER_MIRROR_MOVE, ENTITY_ILLUSIONER_PREPARE_BLINDNESS, ENTITY_ILLUSIONER_PREPARE_MIRROR,
		BLOCK_IRON_DOOR_CLOSE, BLOCK_IRON_DOOR_OPEN, ENTITY_IRON_GOLEM_DAMAGE, ENTITY_IRON_GOLEM_DEATH,
		ENTITY_IRON_GOLEM_HURT, ENTITY_IRON_GOLEM_REPAIR, ENTITY_IRON_GOLEM_STEP, BLOCK_IRON_TRAPDOOR_CLOSE,
		BLOCK_IRON_TRAPDOOR_OPEN, ENTITY_ITEM_FRAME_ADD_ITEM, ENTITY_ITEM_FRAME_BREAK, ENTITY_ITEM_FRAME_PLACE,
		ENTITY_ITEM_FRAME_REMOVE_ITEM, ENTITY_ITEM_FRAME_ROTATE_ITEM, ENTITY_ITEM_BREAK, ENTITY_ITEM_PICKUP,
		BLOCK_LADDER_BREAK, BLOCK_LADDER_FALL, BLOCK_LADDER_HIT, BLOCK_LADDER_PLACE, BLOCK_LADDER_STEP,
		BLOCK_LANTERN_BREAK, BLOCK_LANTERN_FALL, BLOCK_LANTERN_HIT, BLOCK_LANTERN_PLACE, BLOCK_LANTERN_STEP,
		BLOCK_LAVA_AMBIENT, BLOCK_LAVA_EXTINGUISH, BLOCK_LAVA_POP, ENTITY_LEASH_KNOT_BREAK, ENTITY_LEASH_KNOT_PLACE,
		BLOCK_LEVER_CLICK, ENTITY_LIGHTNING_BOLT_IMPACT, ENTITY_LIGHTNING_BOLT_THUNDER, ENTITY_LINGERING_POTION_THROW,
		ENTITY_LLAMA_AMBIENT, ENTITY_LLAMA_ANGRY, ENTITY_LLAMA_CHEST, ENTITY_LLAMA_DEATH, ENTITY_LLAMA_EAT,
		ENTITY_LLAMA_HURT, ENTITY_LLAMA_SPIT, ENTITY_LLAMA_STEP, ENTITY_LLAMA_SWAG, ENTITY_MAGMA_CUBE_DEATH,
		ENTITY_MAGMA_CUBE_HURT, ENTITY_MAGMA_CUBE_JUMP, ENTITY_MAGMA_CUBE_SQUISH, BLOCK_METAL_BREAK, BLOCK_METAL_FALL,
		BLOCK_METAL_HIT, BLOCK_METAL_PLACE, BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF, BLOCK_METAL_PRESSURE_PLATE_CLICK_ON,
		BLOCK_METAL_STEP, ENTITY_MINECART_INSIDE, ENTITY_MINECART_RIDING, ENTITY_MOOSHROOM_CONVERT,
		ENTITY_MOOSHROOM_EAT, ENTITY_MOOSHROOM_MILK, ENTITY_MOOSHROOM_SUSPICIOUS_MILK, ENTITY_MOOSHROOM_SHEAR,
		ENTITY_MULE_AMBIENT, ENTITY_MULE_CHEST, ENTITY_MULE_DEATH, ENTITY_MULE_HURT, MUSIC_CREATIVE, MUSIC_CREDITS,
		MUSIC_DRAGON, MUSIC_END, MUSIC_GAME, MUSIC_MENU, MUSIC_NETHER, MUSIC_UNDER_WATER, BLOCK_NETHER_WART_BREAK,
		ITEM_NETHER_WART_PLANT, BLOCK_NOTE_BLOCK_BASEDRUM, BLOCK_NOTE_BLOCK_BASS, BLOCK_NOTE_BLOCK_BELL,
		BLOCK_NOTE_BLOCK_CHIME, BLOCK_NOTE_BLOCK_FLUTE, BLOCK_NOTE_BLOCK_GUITAR, BLOCK_NOTE_BLOCK_HARP,
		BLOCK_NOTE_BLOCK_HAT, BLOCK_NOTE_BLOCK_PLING, BLOCK_NOTE_BLOCK_SNARE, BLOCK_NOTE_BLOCK_XYLOPHONE,
		BLOCK_NOTE_BLOCK_IRON_XYLOPHONE, BLOCK_NOTE_BLOCK_COW_BELL, BLOCK_NOTE_BLOCK_DIDGERIDOO, BLOCK_NOTE_BLOCK_BIT,
		BLOCK_NOTE_BLOCK_BANJO, ENTITY_OCELOT_HURT, ENTITY_OCELOT_AMBIENT, ENTITY_OCELOT_DEATH, ENTITY_PAINTING_BREAK,
		ENTITY_PAINTING_PLACE, ENTITY_PANDA_PRE_SNEEZE, ENTITY_PANDA_SNEEZE, ENTITY_PANDA_AMBIENT, ENTITY_PANDA_DEATH,
		ENTITY_PANDA_EAT, ENTITY_PANDA_STEP, ENTITY_PANDA_CANT_BREED, ENTITY_PANDA_AGGRESSIVE_AMBIENT,
		ENTITY_PANDA_WORRIED_AMBIENT, ENTITY_PANDA_HURT, ENTITY_PANDA_BITE, ENTITY_PARROT_AMBIENT, ENTITY_PARROT_DEATH,
		ENTITY_PARROT_EAT, ENTITY_PARROT_FLY, ENTITY_PARROT_HURT, ENTITY_PARROT_IMITATE_BLAZE,
		ENTITY_PARROT_IMITATE_CREEPER, ENTITY_PARROT_IMITATE_DROWNED, ENTITY_PARROT_IMITATE_ELDER_GUARDIAN,
		ENTITY_PARROT_IMITATE_ENDER_DRAGON, ENTITY_PARROT_IMITATE_ENDERMITE, ENTITY_PARROT_IMITATE_EVOKER,
		ENTITY_PARROT_IMITATE_GHAST, ENTITY_PARROT_IMITATE_GUARDIAN, ENTITY_PARROT_IMITATE_HUSK,
		ENTITY_PARROT_IMITATE_ILLUSIONER, ENTITY_PARROT_IMITATE_MAGMA_CUBE, ENTITY_PARROT_IMITATE_PHANTOM,
		ENTITY_PARROT_IMITATE_PILLAGER, ENTITY_PARROT_IMITATE_RAVAGER, ENTITY_PARROT_IMITATE_SHULKER,
		ENTITY_PARROT_IMITATE_SILVERFISH, ENTITY_PARROT_IMITATE_SKELETON, ENTITY_PARROT_IMITATE_SLIME,
		ENTITY_PARROT_IMITATE_SPIDER, ENTITY_PARROT_IMITATE_STRAY, ENTITY_PARROT_IMITATE_VEX,
		ENTITY_PARROT_IMITATE_VINDICATOR, ENTITY_PARROT_IMITATE_WITCH, ENTITY_PARROT_IMITATE_WITHER,
		ENTITY_PARROT_IMITATE_WITHER_SKELETON, ENTITY_PARROT_IMITATE_ZOMBIE, ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER,
		ENTITY_PARROT_STEP, ENTITY_PHANTOM_AMBIENT, ENTITY_PHANTOM_BITE, ENTITY_PHANTOM_DEATH, ENTITY_PHANTOM_FLAP,
		ENTITY_PHANTOM_HURT, ENTITY_PHANTOM_SWOOP, ENTITY_PIG_AMBIENT, ENTITY_PIG_DEATH, ENTITY_PIG_HURT,
		ENTITY_PIG_SADDLE, ENTITY_PIG_STEP, ENTITY_PILLAGER_AMBIENT, ENTITY_PILLAGER_CELEBRATE, ENTITY_PILLAGER_DEATH,
		ENTITY_PILLAGER_HURT, BLOCK_PISTON_CONTRACT, BLOCK_PISTON_EXTEND, ENTITY_PLAYER_ATTACK_CRIT,
		ENTITY_PLAYER_ATTACK_KNOCKBACK, ENTITY_PLAYER_ATTACK_NODAMAGE, ENTITY_PLAYER_ATTACK_STRONG,
		ENTITY_PLAYER_ATTACK_SWEEP, ENTITY_PLAYER_ATTACK_WEAK, ENTITY_PLAYER_BIG_FALL, ENTITY_PLAYER_BREATH,
		ENTITY_PLAYER_BURP, ENTITY_PLAYER_DEATH, ENTITY_PLAYER_HURT, ENTITY_PLAYER_HURT_DROWN,
		ENTITY_PLAYER_HURT_ON_FIRE, ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH, ENTITY_PLAYER_LEVELUP,
		ENTITY_PLAYER_SMALL_FALL, ENTITY_PLAYER_SPLASH, ENTITY_PLAYER_SPLASH_HIGH_SPEED, ENTITY_PLAYER_SWIM,
		ENTITY_POLAR_BEAR_AMBIENT, ENTITY_POLAR_BEAR_AMBIENT_BABY, ENTITY_POLAR_BEAR_DEATH, ENTITY_POLAR_BEAR_HURT,
		ENTITY_POLAR_BEAR_STEP, ENTITY_POLAR_BEAR_WARNING, BLOCK_PORTAL_AMBIENT, BLOCK_PORTAL_TRAVEL,
		BLOCK_PORTAL_TRIGGER, ENTITY_PUFFER_FISH_AMBIENT, ENTITY_PUFFER_FISH_BLOW_OUT, ENTITY_PUFFER_FISH_BLOW_UP,
		ENTITY_PUFFER_FISH_DEATH, ENTITY_PUFFER_FISH_FLOP, ENTITY_PUFFER_FISH_HURT, ENTITY_PUFFER_FISH_STING,
		BLOCK_PUMPKIN_CARVE, ENTITY_RABBIT_AMBIENT, ENTITY_RABBIT_ATTACK, ENTITY_RABBIT_DEATH, ENTITY_RABBIT_HURT,
		ENTITY_RABBIT_JUMP, EVENT_RAID_HORN, MUSIC_DISC_11, MUSIC_DISC_13, MUSIC_DISC_BLOCKS, MUSIC_DISC_CAT,
		MUSIC_DISC_CHIRP, MUSIC_DISC_FAR, MUSIC_DISC_MALL, MUSIC_DISC_MELLOHI, MUSIC_DISC_STAL, MUSIC_DISC_STRAD,
		MUSIC_DISC_WAIT, MUSIC_DISC_WARD, BLOCK_REDSTONE_TORCH_BURNOUT, ENTITY_SALMON_AMBIENT, ENTITY_SALMON_DEATH,
		ENTITY_SALMON_FLOP, ENTITY_SALMON_HURT, BLOCK_SAND_BREAK, BLOCK_SAND_FALL, BLOCK_SAND_HIT, BLOCK_SAND_PLACE,
		BLOCK_SAND_STEP, BLOCK_SCAFFOLDING_BREAK, BLOCK_SCAFFOLDING_FALL, BLOCK_SCAFFOLDING_HIT,
		BLOCK_SCAFFOLDING_PLACE, BLOCK_SCAFFOLDING_STEP, ENTITY_SHEEP_AMBIENT, ENTITY_SHEEP_DEATH, ENTITY_SHEEP_HURT,
		ENTITY_SHEEP_SHEAR, ENTITY_SHEEP_STEP, ITEM_SHIELD_BLOCK, ITEM_SHIELD_BREAK, ITEM_SHOVEL_FLATTEN,
		ENTITY_SHULKER_AMBIENT, BLOCK_SHULKER_BOX_CLOSE, BLOCK_SHULKER_BOX_OPEN, ENTITY_SHULKER_BULLET_HIT,
		ENTITY_SHULKER_BULLET_HURT, ENTITY_SHULKER_CLOSE, ENTITY_SHULKER_DEATH, ENTITY_SHULKER_HURT,
		ENTITY_SHULKER_HURT_CLOSED, ENTITY_SHULKER_OPEN, ENTITY_SHULKER_SHOOT, ENTITY_SHULKER_TELEPORT,
		ENTITY_SILVERFISH_AMBIENT, ENTITY_SILVERFISH_DEATH, ENTITY_SILVERFISH_HURT, ENTITY_SILVERFISH_STEP,
		ENTITY_SKELETON_AMBIENT, ENTITY_SKELETON_DEATH, ENTITY_SKELETON_HORSE_AMBIENT, ENTITY_SKELETON_HORSE_DEATH,
		ENTITY_SKELETON_HORSE_HURT, ENTITY_SKELETON_HORSE_SWIM, ENTITY_SKELETON_HORSE_AMBIENT_WATER,
		ENTITY_SKELETON_HORSE_GALLOP_WATER, ENTITY_SKELETON_HORSE_JUMP_WATER, ENTITY_SKELETON_HORSE_STEP_WATER,
		ENTITY_SKELETON_HURT, ENTITY_SKELETON_SHOOT, ENTITY_SKELETON_STEP, ENTITY_SLIME_ATTACK, ENTITY_SLIME_DEATH,
		ENTITY_SLIME_HURT, ENTITY_SLIME_JUMP, ENTITY_SLIME_SQUISH, BLOCK_SLIME_BLOCK_BREAK, BLOCK_SLIME_BLOCK_FALL,
		BLOCK_SLIME_BLOCK_HIT, BLOCK_SLIME_BLOCK_PLACE, BLOCK_SLIME_BLOCK_STEP, ENTITY_MAGMA_CUBE_DEATH_SMALL,
		ENTITY_MAGMA_CUBE_HURT_SMALL, ENTITY_MAGMA_CUBE_SQUISH_SMALL, ENTITY_SLIME_DEATH_SMALL, ENTITY_SLIME_HURT_SMALL,
		ENTITY_SLIME_JUMP_SMALL, ENTITY_SLIME_SQUISH_SMALL, BLOCK_SMOKER_SMOKE, ENTITY_SNOWBALL_THROW, BLOCK_SNOW_BREAK,
		BLOCK_SNOW_FALL, ENTITY_SNOW_GOLEM_AMBIENT, ENTITY_SNOW_GOLEM_DEATH, ENTITY_SNOW_GOLEM_HURT,
		ENTITY_SNOW_GOLEM_SHOOT, BLOCK_SNOW_HIT, BLOCK_SNOW_PLACE, BLOCK_SNOW_STEP, ENTITY_SPIDER_AMBIENT,
		ENTITY_SPIDER_DEATH, ENTITY_SPIDER_HURT, ENTITY_SPIDER_STEP, ENTITY_SPLASH_POTION_BREAK,
		ENTITY_SPLASH_POTION_THROW, ENTITY_SQUID_AMBIENT, ENTITY_SQUID_DEATH, ENTITY_SQUID_HURT, ENTITY_SQUID_SQUIRT,
		BLOCK_STONE_BREAK, BLOCK_STONE_BUTTON_CLICK_OFF, BLOCK_STONE_BUTTON_CLICK_ON, BLOCK_STONE_FALL, BLOCK_STONE_HIT,
		BLOCK_STONE_PLACE, BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF, BLOCK_STONE_PRESSURE_PLATE_CLICK_ON, BLOCK_STONE_STEP,
		ENTITY_STRAY_AMBIENT, ENTITY_STRAY_DEATH, ENTITY_STRAY_HURT, ENTITY_STRAY_STEP, BLOCK_SWEET_BERRY_BUSH_BREAK,
		BLOCK_SWEET_BERRY_BUSH_PLACE, ITEM_SWEET_BERRIES_PICK_FROM_BUSH, ENCHANT_THORNS_HIT, ENTITY_TNT_PRIMED,
		ITEM_TOTEM_USE, ITEM_TRIDENT_HIT, ITEM_TRIDENT_HIT_GROUND, ITEM_TRIDENT_RETURN, ITEM_TRIDENT_RIPTIDE_1,
		ITEM_TRIDENT_RIPTIDE_2, ITEM_TRIDENT_RIPTIDE_3, ITEM_TRIDENT_THROW, ITEM_TRIDENT_THUNDER, BLOCK_TRIPWIRE_ATTACH,
		BLOCK_TRIPWIRE_CLICK_OFF, BLOCK_TRIPWIRE_CLICK_ON, BLOCK_TRIPWIRE_DETACH, ENTITY_TROPICAL_FISH_AMBIENT,
		ENTITY_TROPICAL_FISH_DEATH, ENTITY_TROPICAL_FISH_FLOP, ENTITY_TROPICAL_FISH_HURT, ENTITY_TURTLE_AMBIENT_LAND,
		ENTITY_TURTLE_DEATH, ENTITY_TURTLE_DEATH_BABY, ENTITY_TURTLE_EGG_BREAK, ENTITY_TURTLE_EGG_CRACK,
		ENTITY_TURTLE_EGG_HATCH, ENTITY_TURTLE_HURT, ENTITY_TURTLE_HURT_BABY, ENTITY_TURTLE_LAY_EGG,
		ENTITY_TURTLE_SHAMBLE, ENTITY_TURTLE_SHAMBLE_BABY, ENTITY_TURTLE_SWIM, UI_BUTTON_CLICK, UI_LOOM_SELECT_PATTERN,
		UI_LOOM_TAKE_RESULT, UI_CARTOGRAPHY_TABLE_TAKE_RESULT, UI_STONECUTTER_TAKE_RESULT, UI_STONECUTTER_SELECT_RECIPE,
		UI_TOAST_CHALLENGE_COMPLETE, UI_TOAST_IN, UI_TOAST_OUT, ENTITY_VEX_AMBIENT, ENTITY_VEX_CHARGE, ENTITY_VEX_DEATH,
		ENTITY_VEX_HURT, ENTITY_VILLAGER_AMBIENT, ENTITY_VILLAGER_CELEBRATE, ENTITY_VILLAGER_DEATH,
		ENTITY_VILLAGER_HURT, ENTITY_VILLAGER_NO, ENTITY_VILLAGER_TRADE, ENTITY_VILLAGER_YES,
		ENTITY_VILLAGER_WORK_ARMORER, ENTITY_VILLAGER_WORK_BUTCHER, ENTITY_VILLAGER_WORK_CARTOGRAPHER,
		ENTITY_VILLAGER_WORK_CLERIC, ENTITY_VILLAGER_WORK_FARMER, ENTITY_VILLAGER_WORK_FISHERMAN,
		ENTITY_VILLAGER_WORK_FLETCHER, ENTITY_VILLAGER_WORK_LEATHERWORKER, ENTITY_VILLAGER_WORK_LIBRARIAN,
		ENTITY_VILLAGER_WORK_MASON, ENTITY_VILLAGER_WORK_SHEPHERD, ENTITY_VILLAGER_WORK_TOOLSMITH,
		ENTITY_VILLAGER_WORK_WEAPONSMITH, ENTITY_VINDICATOR_AMBIENT, ENTITY_VINDICATOR_CELEBRATE,
		ENTITY_VINDICATOR_DEATH, ENTITY_VINDICATOR_HURT, BLOCK_LILY_PAD_PLACE, ENTITY_WANDERING_TRADER_AMBIENT,
		ENTITY_WANDERING_TRADER_DEATH, ENTITY_WANDERING_TRADER_DISAPPEARED, ENTITY_WANDERING_TRADER_DRINK_MILK,
		ENTITY_WANDERING_TRADER_DRINK_POTION, ENTITY_WANDERING_TRADER_HURT, ENTITY_WANDERING_TRADER_NO,
		ENTITY_WANDERING_TRADER_REAPPEARED, ENTITY_WANDERING_TRADER_TRADE, ENTITY_WANDERING_TRADER_YES,
		BLOCK_WATER_AMBIENT, WEATHER_RAIN, WEATHER_RAIN_ABOVE, ENTITY_WITCH_AMBIENT, ENTITY_WITCH_CELEBRATE,
		ENTITY_WITCH_DEATH, ENTITY_WITCH_DRINK, ENTITY_WITCH_HURT, ENTITY_WITCH_THROW, ENTITY_WITHER_AMBIENT,
		ENTITY_WITHER_BREAK_BLOCK, ENTITY_WITHER_DEATH, ENTITY_WITHER_HURT, ENTITY_WITHER_SHOOT,
		ENTITY_WITHER_SKELETON_AMBIENT, ENTITY_WITHER_SKELETON_DEATH, ENTITY_WITHER_SKELETON_HURT,
		ENTITY_WITHER_SKELETON_STEP, ENTITY_WITHER_SPAWN, ENTITY_WOLF_AMBIENT, ENTITY_WOLF_DEATH, ENTITY_WOLF_GROWL,
		ENTITY_WOLF_HOWL, ENTITY_WOLF_HURT, ENTITY_WOLF_PANT, ENTITY_WOLF_SHAKE, ENTITY_WOLF_STEP, ENTITY_WOLF_WHINE,
		BLOCK_WOODEN_DOOR_CLOSE, BLOCK_WOODEN_DOOR_OPEN, BLOCK_WOODEN_TRAPDOOR_CLOSE, BLOCK_WOODEN_TRAPDOOR_OPEN,
		BLOCK_WOOD_BREAK, BLOCK_WOODEN_BUTTON_CLICK_OFF, BLOCK_WOODEN_BUTTON_CLICK_ON, BLOCK_WOOD_FALL, BLOCK_WOOD_HIT,
		BLOCK_WOOD_PLACE, BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF, BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON, BLOCK_WOOD_STEP,
		ENTITY_ZOMBIE_AMBIENT, ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR, ENTITY_ZOMBIE_ATTACK_IRON_DOOR,
		ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, ENTITY_ZOMBIE_CONVERTED_TO_DROWNED, ENTITY_ZOMBIE_DEATH,
		ENTITY_ZOMBIE_DESTROY_EGG, ENTITY_ZOMBIE_HORSE_AMBIENT, ENTITY_ZOMBIE_HORSE_DEATH, ENTITY_ZOMBIE_HORSE_HURT,
		ENTITY_ZOMBIE_HURT, ENTITY_ZOMBIE_INFECT, ENTITY_ZOMBIE_PIGMAN_AMBIENT, ENTITY_ZOMBIE_PIGMAN_ANGRY,
		ENTITY_ZOMBIE_PIGMAN_DEATH, ENTITY_ZOMBIE_PIGMAN_HURT, ENTITY_ZOMBIE_STEP, ENTITY_ZOMBIE_VILLAGER_AMBIENT,
		ENTITY_ZOMBIE_VILLAGER_CONVERTED, ENTITY_ZOMBIE_VILLAGER_CURE, ENTITY_ZOMBIE_VILLAGER_DEATH,
		ENTITY_ZOMBIE_VILLAGER_HURT, ENTITY_ZOMBIE_VILLAGER_STEP;
	}

	private final Object a;
	private static final Class<?> c = Reflections.getNMSClass("EntityPlayer");

	public NMSPlayer(Object nmsPlayer) {
		a = nmsPlayer;
	}

	public NMSPlayer(org.bukkit.entity.Player bukkitPlayer) {
		this(NMSAPI.getPlayer(bukkitPlayer));
	}

	public void kill() {
		Reflections.invoke(a,Reflections.getMethod(c, "killEntity"));
	}

	public void sendActionBar(String text) {
		sendPacket(NMSAPI.getPacketPlayOutTitle(TitleAction.ACTIONBAR, TheAPI.colorize(text)));
	}

	public void setTabList(String header, String footer) {
		sendPacket(NMSAPI.getPacketPlayOutPlayerListHeaderFooter(TheAPI.colorize(header), TheAPI.colorize(footer)));
	}

	public void sendTitle(String title, String subtitle) {
		sendPacket(NMSAPI.getPacketPlayOutTitle(TitleAction.TITLE, TheAPI.colorize(title)));
		sendPacket(NMSAPI.getPacketPlayOutTitle(TitleAction.SUBTITLE, TheAPI.colorize(subtitle)));
	}

	public void hurt(float damage) {
		damage(damage);
	}

	public void damage(float damage) {
		Object generic = getFieldWithNull(Reflections.getNMSClass("DamageSource"), "GENERIC");
		Reflections.invoke(a, getMethod("damageEntity",Reflections.getNMSClass("DamageSource"), float.class),generic, damage);
	}

	public void playSound(Sound sound, float pitch, float yaw) {
		Object s = Reflections.getField(Reflections.getNMSClass("SoundEffects"), sound.name());
		Reflections.invoke(a, getMethod("a", Reflections.getNMSClass("SoundEffects")),s,pitch, yaw);
	}

	public PlayerConnection getPlayerConnection() {
		return new PlayerConnection(getField("playerConnection"));
	}

	public PlayerInventory getInventory() {
		return (PlayerInventory) Reflections.c(Reflections.getConstructor(Reflections.getBukkitClass("inventory.CraftInventoryPlayer"),
						Reflections.getNMSClass("PlayerInventory")), Reflections.get(Reflections.getField(c, "inventory"),a));
	}

	public void setInventory(PlayerInventory a) {
		Reflections.setField(a, Reflections.getField(c,"inventory"), Reflections.cast(Reflections.getNMSClass("PlayerInventory"),
				Reflections.cast(Reflections.getBukkitClass("inventory.CraftInventoryPlayer"), a)));
	}

	public void teleport(Location destination) {
		getPlayerConnection().teleport(destination);
	}

	public void chat(String message) {
		getPlayerConnection().chat(message, false);
	}

	public void sendMessageJson(String message) {
		Reflections.invoke(a, getMethod("sendMessage", NMSAPI.getIChatBaseComponentJson(message).getClass()),NMSAPI.getIChatBaseComponentJson(message));
	}

	public void sendMessage(String message) {
		Reflections.invoke(a, getMethod("sendMessage", NMSAPI.getIChatBaseComponentText(message).getClass()),NMSAPI.getIChatBaseComponentText(message));
	}

	public int getMaxAir() {
		return (int) getField("maxAirTicks");
	}

	public void setMaxAir(int value) {
		Reflections.setField(a, Reflections.getField(c, "maxAirTicks"), value);
	}

	public int getPing() {
		return (int) getField("ping");
	}

	// PLEASE DO NOT DO THIS
	public void setPing(int value) {
		Reflections.setField(a, Reflections.getField(c, "ping"), value);
	}

	public int getPortalCooldown() {
		return (int) getField("portalCooldown");
	}

	public void setPortalCooldown(int value) {
		Reflections.setField(a, Reflections.getField(c, "portalCooldown"), value);
	}

	public double getMaxHealth() {
		return (double) getField("maxHealthCache");
	}

	public void setMaxHealth(double value) {
		Reflections.setField(a, Reflections.getField(c, "maxHealthCache"), value);
	}

	public boolean isSneaking() {
		return (boolean) getField("isSneaking");
	}

	public void setSneaking(boolean value) {
		Reflections.invoke(a, getMethod("setSneaking"), value);
	}

	public int getNoDamage() {
		return (int) getField("invulnerableTicks");
	}

	public void setNoDamage(int ticks) {
		Reflections.setField(a, Reflections.getField(c, "invulnerableTicks"), ticks);
	}

	public void setInvulnerable(boolean value) {
		Reflections.invoke(a, getMethod("setInvulnerable"), value);
	}

	public boolean isInvulnerable() {
		return (boolean) getField("isInvulnerable");
	}

	public Chunk getChunk() {
		return getWorld().getChunkAt((int) getField("chunkX"), (int) getField("chunkZ"));
	}

	public World getWorld() {
		return (World) getField(getField("world"),getField("world").getClass(), "getWorld");
	}

	public float getFallDistance() {
		return (float) getField("fallDistance");
	}

	public double getX() {
		return (double) getField("locX");
	}

	public double getY() {
		return (double) getField("locY");
	}

	public double getZ() {
		return (double) getField("locZ");
	}

	public float getPitch() {
		return (float) getField("pitch");
	}

	public float getYaw() {
		return (float) getField("yaw");
	}

	public Location getLocation() {
		return new Location(getWorld(), getX(), getY(), getZ());
	}

	public Player getPlayer() {
		Player s = TheAPI.getPlayer(getName());
		return s.getName().equals(getName()) ? s : null;
	}

	public String getName() {
		return Reflections.invoke(a, Reflections.getMethod(c, "getName")).toString();
	}

	public String getCustomName() {
		Object o = Reflections.invoke(a, Reflections.getMethod(c, "getCustomName"));
		return (String)(Reflections.invoke(o, Reflections.getMethod(Reflections.getNMSClass("IChatBaseComponent"), "getText")));
	}

	public void setCustomName(String name) {
		Reflections.invoke(a, getMethod("setCustomName"), NMSAPI.getIChatBaseComponentText(name));
	}

	public boolean getTabListName() {
		return (boolean) getField("listName");
	}

	public void setTabListName(String name) {
		Reflections.setField(a, Reflections.getField(c, "listName"), NMSAPI.getIChatBaseComponentText(name));
	}

	public boolean getCustomNameVisible() {
		return (boolean) getField("getCustomNameVisible");
	}

	public void setCustomNameVisible(boolean value) {
		Reflections.invoke(a, getMethod("setCustomNameVisible"), value);
	}

	public boolean isGlowing() {
		return (boolean) getField("glowing");
	}

	public void setGlowing(boolean value) {
		Reflections.setField(a, Reflections.getField(c, "glowing"), value);
	}

	public String getDisplayName() {
		Object o = getField("displayName");
		return o instanceof String ? (String)o : (String)(Reflections.invoke(o, Reflections.getMethod(Reflections.getNMSClass("IChatBaseComponent"), "getText")));
	}

	public void setDisplayName(String name) {
		Reflections.setField(a, Reflections.getField(c, "displayName"), name);
	}

	public float getExp() {
		return (float) getField("exp");
	}

	public void setExp(float exps) {
		Reflections.setField(a, Reflections.getField(c, "exp"), exps);
	}

	public boolean isDead() {
		return (boolean) getField("dead");
	}

	public boolean canPickUpLoot() {
		return (boolean) getField("canPickUpLoot");
	}

	public void setCanPickUpLoot(boolean value) {
		Reflections.setField(a, Reflections.getField(c, "canPickUpLoot"), value);
	}

	public boolean isColliding() {
		return (boolean) getField("collides");
	}

	public void setColliding(boolean value) {
		Reflections.setField(a, Reflections.getField(c, "collides"), value);
	}

	public float getHealth() {
		Object o = Reflections.invoke(a, Reflections.getMethod(c, "getBukkitEntity"));
		return (float) getField(o,o.getClass(),"health");
	}

	public void setHealth(float health) {
		Reflections.invoke(a, getMethod("setHealth"), health);
	}

	public int getFood() {
		Object o = Reflections.invoke(a, Reflections.getMethod(c, "getFoodData"));
		return (int) getField(o,o.getClass(), "foodLevel");
	}

	public void setFood(int food) {
		Object o = Reflections.invoke(a, Reflections.getMethod(c, "getFoodData"));
		Reflections.setField(o, Reflections.getField(o.getClass(), "foodLevel"), food);
	}

	public int getFire() {
		return (int) getField("fireTicks");
	}

	public void setFire(int fire) {
		Reflections.setField(a, Reflections.getField(c,"fireTicks"), fire);
	}

	public double getAir() {
		return (float) getField("getAirTicks");
	}

	public void setAir(int air) {
		Reflections.invoke(a, getMethod("setAirTicks"), air);
	}

	public void sendPacket(Object packet) {
		getPlayerConnection().sendPacket(packet);
	}
	
	public Object getField(String name) {
		return Reflections.get(Reflections.getField(c, name),a);
	}
	
	public Object getField(Object o, Class<?> in, String name) {
		return Reflections.get(Reflections.getField(in, name),o);
	}
	
	public Object getFieldWithNull(String name) {
		return Reflections.get(Reflections.getField(c, name),null);
	}
	
	public Object getFieldWithNull(Class<?> in, String name) {
		return Reflections.get(Reflections.getField(in, name),null);
	}
	
	public Method getMethod(String name, Class<?>... a) {
		return Reflections.getMethod(c, name, a);
	}

}
